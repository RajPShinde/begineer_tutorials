<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="test_talker_8cpp" kind="file" language="C++">
    <compoundname>testTalker.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="no">ros/ros.h</includes>
    <includes local="no">tf/transform_listener.h</includes>
    <includes local="no">ros/service_client.h</includes>
    <includes local="no">std_msgs/String.h</includes>
    <includes local="yes">beginner_tutorials/serviceString.h</includes>
    <incdepgraph>
      <node id="42">
        <label>test/testTalker.cpp</label>
        <link refid="testTalker.cpp"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>tf/transform_listener.h</label>
      </node>
      <node id="46">
        <label>ros/service_client.h</label>
      </node>
      <node id="43">
        <label>gtest/gtest.h</label>
      </node>
      <node id="48">
        <label>beginner_tutorials/serviceString.h</label>
      </node>
      <node id="44">
        <label>ros/ros.h</label>
      </node>
      <node id="47">
        <label>std_msgs/String.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test_talker_8cpp_1ad8615bc0b2081ca6485dfd376534ff9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Talker, testService)</argsstring>
        <name>TEST</name>
        <param>
          <type>Talker</type>
        </param>
        <param>
          <type>testService</type>
        </param>
        <briefdescription>
<para>A unit test to check that the talker string service works correctly. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/testTalker.cpp" line="47" column="1" bodyfile="test/testTalker.cpp" bodystart="47" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="test_talker_8cpp_1a82b5792955d05743b5a07645e2221544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Talker, testTf)</argsstring>
        <name>TEST</name>
        <param>
          <type>Talker</type>
        </param>
        <param>
          <type>testTf</type>
        </param>
        <briefdescription>
<para>A unit test to check the Broadcasted frames offset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/testTalker.cpp" line="68" column="1" bodyfile="test/testTalker.cpp" bodystart="68" bodyend="93"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Tests for <ref refid="talker_8cpp" kindref="compound">talker.cpp</ref>. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>MIT License, © 2019 Raj Shinde</para></simplesect>
<simplesect kind="author"><para>Raj Shinde </para></simplesect>
<simplesect kind="date"><para>11/10/2019 </para></simplesect>
<simplesect kind="version"><para>1.0 </para></simplesect>
</para><sect1 id="test_talker_8cpp_1DESCRIPTION">
<title>DESCRIPTION</title>
<para>Test are written for talker node </para></sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>©<sp/>2019<sp/>Raj<sp/>Shinde</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>Files<sp/>(the<sp/>“Software”),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>“AS<sp/>IS”,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ros/ros.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tf/transform_listener.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ros/service_client.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;std_msgs/String.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;beginner_tutorials/serviceString.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="test_talker_8cpp_1ad8615bc0b2081ca6485dfd376534ff9f" kindref="member">TEST</ref>(Talker,<sp/>testService)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creating<sp/>a<sp/>node<sp/>handler<sp/>n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">ros::NodeHandle<sp/>n;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>an<sp/>object<sp/>client<sp/>to<sp/>use<sp/>test<sp/>the<sp/>service<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">ros::ServiceClient<sp/>client<sp/>=</highlight></codeline>
<codeline lineno="53"><highlight class="normal">n.serviceClient&lt;beginner_tutorials::serviceString&gt;(</highlight><highlight class="stringliteral">&quot;service_string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">beginner_tutorials::serviceString<sp/>srv;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">srv.request.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Check!!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>service</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">client.call(srv);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compare<sp/>the<sp/>expected<sp/>and<sp/>actual<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">EXPECT_STREQ(srv.response.sChanged.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;Check!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="test_talker_8cpp_1ad8615bc0b2081ca6485dfd376534ff9f" kindref="member">TEST</ref>(Talker,<sp/>testTf)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creating<sp/>a<sp/>node<sp/>handler<sp/>n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">ros::NodeHandle<sp/>n;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creating<sp/>Objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">tf::TransformListener<sp/>listener;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">tf::StampedTransform<sp/>transform;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Listen<sp/>for<sp/>a<sp/>tf<sp/>broadcast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ros::ok())<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>listener.lookupTransform(</highlight><highlight class="stringliteral">&quot;/talk&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/world&quot;</highlight><highlight class="normal">,<sp/>ros::Time(0),<sp/>transform);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(tf::TransformException<sp/>&amp;ex)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ex.what());</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ros::Duration(1.0).sleep();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>the<sp/>expected<sp/>and<sp/>actual<sp/>transform<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>EXPECT_NEAR(0,<sp/>transform.getOrigin().x(),<sp/>1);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>EXPECT_NEAR(7,<sp/>transform.getOrigin().y(),<sp/>1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>EXPECT_NEAR(-6,<sp/>transform.getOrigin().z(),<sp/>1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="test/testTalker.cpp"/>
  </compounddef>
</doxygen>
